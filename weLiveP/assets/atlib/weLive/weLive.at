import /.weLive.weLiveLocalInterface;
import /.weLive.weLiveRemoteInterface;
import /.at.support.timer;

import /.at.lang.futures exclude minutes, seconds, millisec;
enableFutures(true);
//paksos senses alghorythm for leader

//Defain Player
deftype Player;
 
def log(text) {
  Android.Log.v("weLive", text);
};

// WPO session 6 slide 15
//Create Android object
// Android := object: {
//	def parent := jlobby.edu.vub.at.android.util.IATAndroid.getInstance().getParentActivity();
//	def Log := jlobby.android.util.Log;
//};


//Main function also define myUserID that is random number
def makeWeLive() {
	object: {
		//define object to talk with JAVA
		def JweLive;

  		//HashMap of [userId, Far Reference]
		def users := jlobby.java.util.HashMap.new();
		//Array of far references, avoids iterating over hashmap
		def userReferences := [];
		def userIds := [];
		
  		//myUserId definition from localinterface (set by JAVA)
		def myUserId;
		// My user path
		def myUserPath := self;

		//define coordinator reference
		def coordinatorRef;
		def coordinatorId;
  		
	  	// HashMap of [userId, point(x,y)];
	  	def points := jlobby.java.util.HashMap.new();

		//def points.each: closure {
		//    def valit := points.values().iterator();
		 //   while: { valit.hasNext() } do: {
		 //     closure(valit.next());
		//    };
	  //	};
	  	

		//Local interface for android gui
		def local := weLiveLocalInterface.new(self);
		//Remote interface for other AT actors
		def remote := weLiveRemoteInterface.new(self);
	  


	  
	  export: remote as: Player;
	  whenever: Player discovered: { |ref|
	    log("Discovered other painter:" + ref);

	
	 def knownUser := userReferences.contains(ref);
	    if: (! knownUser) then: {
	
		      // ask user id to be able to grey out/recolor upon disconnection.
		      when: ref<-getUserId()@FutureMessage becomes: { | id |
		        system.println("Discovered other player:" +id + " : " +ref);
				
				//Store ref into ref array
				 userReferences := userReferences + [ref];
				 userIds := userIds + [id];
				 //store ref and id in users hash map
				 users.put(id, ref);
				
					
				//If my coordinator is nil and I discover new player I ask him: what is yours Coordinator ref
				 if: (self.coordinatorRef == nil) then: {
				    when: ref<-getCoordinator()@FutureMessage becomes: { |coordinator|
				    	
				    	def cooId := coordinator;
				    	
				    	if: (cooId != nil) then: {
				    		// get ref for coordinator
				    		def othRef := users.get(cooId);
				    		
				    		
				    		self.coordinatorId := cooId;
				    		self.coordinatorRef := othRef;
				    		system.println("Coordinator set to: " + self.coordinatorRef);
				    	};
		
				    	if: (self.coordinatorRef == nil) then: {
					   		//self.coordinatorRef := myUserPath;
					   		//self.coordinatorId := myUserId;
				    		//system.println("Coordinator is ME = " + self.coordinatorRef);
				    		
				    		//Start Fight for coordinator roles
							coordinatorFight();
				    		
					    };  	
				    }; //ref<-getCoordinator()@FutureMessage
				}; //ends  if: (self.coordinatorRef == nil) 
				def countDisconects := nil;
		        whenever: ref disconnected: {
		          system.println("Disconnected other player:" +id + " : " +ref);
		          system.println("CoordinatorID = " + coordinatorId);
			          if: (id == coordinatorId) then: {
			          		//do coordinator selection
							system.println("Coordinator Disconnected. Chose new one");
							coordinatorFight();
			          };
		        };
		
		        whenever: ref reconnected: {
		          system.println("Reconnected other player:" +id + " : " +ref);
		        };			 	      
		      
		      }; //ends ref<-getUserId()@FutureMessage
	    
	    }; //ends  if: (! knownUser)
  
	    
	  }; //ends whenever player discovered
	  


	 
	 
	//If no player is discovered in 20 sec -> I set myself as coordinator
	//till moment when I discover sombody
	  when: seconds(30) elapsed: {
	  
	  	//sent message to JAVA to run the game
		JweLive.startGame(myUserId);
	  
	  		if: (userReferences.length < 1) then: {
	  			system.println("I did not discover anybody in 30 sec, I am setting myself as coordinator");
		  		self.coordinatorRef := myUserPath;
				self.coordinatorId := myUserId;
	  		}
	  		else: {
	  			system.println("I discover somebody in 30 sec and 1 - he give me coordinator or we fait who will be the one");
	  		};
	  };
	 
	  
	 
	//Coordinator Fight function
	def coordinatorFight() {
		system.println("Coordinator Fight");
	
		def bigUserRef := [];
		userIds.each: { |bigUserID|
		
			if: (bigUserID > self.myUserId) then: {
				//get reference
				def othRef := users.get(bigUserID);
				//put references into list
				bigUserRef := bigUserRef + [othRef];			
				
			};
		}; //end of each userIds

 		system.println("BigUserRef list lenght" + bigUserRef.length);
		
		if: (bigUserRef == []) then: {
			
		}
		else: { //if there is someone in the bigUserRef list
			def countOfAnsw := 0;
			bigUserRef.each: { |othRef|
	
				when: othRef<-areYouLive()@FutureMessage becomes: { | answId |
					system.println("User is livee");
					//Do nothing becouse, someone bigger than me is alive
					
					//count how many answers are there
					countOfAnsw := countOfAnsw + 1;
				};
			
				//system.println("Test 3 minutes"); //@Due(minutes(3))
				//when: othRef<-chh()@Due(3.minutes) becomes: { |message|
				//	system.println("Yes");
				//}
				//catch: TimeoutException using: { |e|
				//	system.println("No");
				//};
			};
				
			//wait 30 sec while other users with biger ID will answer
			// if noone answers I set myself as coordinator
			// If someone answers I ask him to send other users messages (bigger users)
			when: seconds(30) elapsed: {
			
		  		if: (countOfAnsw < 1) then: {
		  			system.println("Noone of user biger than me answered, set myself as coordinator");
			  		self.coordinatorRef := myUserPath;
					self.coordinatorId := myUserId;
					countOfAnsw := 0;
		  		}
		  		else: {
		  			countOfAnsw := 0;
		  			system.println("somebody answered, so next he needs to ask others bigger ones");
		  		};
			  
			  	
			  
			  }; // ends 30 second elapse
		}; // ends else bigUSerRef list was not empt
	 };//ends coordinator fight
	 
	 
	JweLive := Android.parent.registerATApp(local);
	}; //ends of WeLive object
}; //ends of weLive

system.println("weLive started");
network.online();
self;