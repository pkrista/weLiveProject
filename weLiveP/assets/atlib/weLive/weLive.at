import /.weLive.weLiveLocalInterface;
import /.weLive.weLiveRemoteInterface;
import /.at.support.timer;

import /.at.lang.futures exclude minutes, seconds, millisec;
enableFutures(true);

//Defain Player
deftype Player;

// WPO session 6 slide 15 //Create Android object
def Android := object: {
	def parent := jlobby.edu.vub.at.android.util.IATAndroid.getInstance().getParentActivity();
	def Log := jlobby.android.util.Log;
};


def makeWeLive() {
	object: {
		// Define object to talk with JAVA
		def JweLive;

		// Local interface for android gui
		def local := weLiveLocalInterface.new(self);
		// Remote interface for other AT actors
		def remote := weLiveRemoteInterface.new(self);

		// myUserId definition from localinterface (From JAVA)
		def myUserId;
		// My user ref
		def myUserRef := self;

		// Coordinator far reference and id
		def coordinatorRef := 0;
		def coordinatorId := 0;
		
  		// HashMap of all discovered users[userId, Far Reference]
		def users := jlobby.java.util.HashMap.new();
		// Array of far references, avoids iterating over hashm
		def userReferences := [];
		// Array of users IDs
		def userIds := [];
		
		// HashMap of users online [userId, Far Reference]
		def userIDsOnlineMap := jlobby.java.util.HashMap.new();
		def userIDsOnlineMap.each: closure {
			def valit := userIDsOnlineMap.values().iterator();
			while: { valit.hasNext() } do: {
				closure(valit.next());
			};
	  	};
		
  		// Current Grid (from JAVA)
	  	def mainGrid;
	  	// Grid Hight and Width (default 10H and 7W - changes comes from JAVA)
	  	def gridH := 10;
	  	def gridW := 7;
  		
  		// Store all userInfo array (from JAVA)
	  	def allUserInfoArray;

		// Value to varufy if the other peenr answer thet they are live
		def peerAnswer := false;

		//
		def acceptPlayer := true;
		
	  	export: remote as: Player;
	  	whenever: Player discovered: { |ref|
			
			 def knownUser := userReferences.contains(ref);
			 if: (! knownUser) then: {
			
			    // ask user id to be able to grey out/recolor upon disconnection.
			    when: ref<-getUserId()@FutureMessage becomes: { | id |
			    
				    if: (id != 0) then:{
				    	if:(acceptPlayer)then:{
			    			system.println("Accept player");
							

				        	system.println("Discovered other player:" +id + " : " +ref);
							//Store User in AT
							storeUserLocal(id, ref);
							
							receiveAndSetCoordinator(ref);
										
					        whenever: ref disconnected: {
					          system.println("Disconnected other player:" +id + " : " +ref);
								  if: (id != nil) then:{ //If user id is not null
						            JweLive.grayOut(id, true); //AT to JAVA
						          
							          if: (id == coordinatorId) then: {
							          		//initiate coordinator selection
											coordinatorFight();
							          };
							          
							          //Take user out of oneline player list
									  //to not send him full new grid, just new points
									  userIDsOnlineMap.remove(id);	
								  };	        
					        }; //disconnected
			
					        whenever: ref reconnected: {
					          	system.println("Reconnected other player:" +id + " : " +ref);
					        	if: (id != nil) then:{ //If user id is not null
							        JweLive.grayOut(id, false); //AT to JAVA
						        
						        	//put user back to oneline user list
									userIDsOnlineMap.put(id, ref);
									
						        	//Start Coordinator fight to decide who will be new coordinator
									//and which grid wil become as new one
									coordinatorFight();
						        };
					        }; //Reconnected	
	 	      
	 	      			} //Accept player
				    	else:{
				    		system.println("Do not accept");
				    	};
	 	      		};
	 	      
				}; //when get user id
			}; //ends  if: (! knownUser) 
		}; //ends whenever player discovered
	  
 
		//If no player is not discovered in 20 sec -> I set myself as coordinator
		when: seconds(20) elapsed: { 
	  		if: (userReferences.length < 1) then: {
	  			system.println("I did not discover anybody in 20 sec, Coordinator ME");
	
				setCoordinatorLocal(myUserId, myUserRef);		
	  		};
		};
		
		def receiveAndSetCoordinator(ref){
			//Get discovered users coordinator id
		    when: ref<-getCoordinator()@FutureMessage becomes: { |coordinator|
		    	def cooId := coordinator;
		    	
		    	if:(self.coordinatorId == myUserId) then:{
		    		//Send: CoordinatorID, grid size, grid points array, usersInfo array
		    		coordinatorSendNewUserAllData(ref);
		    		
		    	};
		    	if:(self.coordinatorRef == 0) then:{
		    		//If it is not 0 then set local coordinator as his
			    	if: (cooId != 0) then: {
			    		// get ref for coordinator
			    		def othRef := getUserReference(cooId);
	
			    		setCoordinatorLocal(cooId, othRef);
			    		
			    		system.println("Coordinator set to: " + self.coordinatorRef);
			    	}
			    	//If it is 0 then iniciate coordinator fight
					else: {				    		
						coordinatorFight(); //Start Fight for coordinator roles			    		
				    };  
		    	};
		   	};
		};
		
		def coordinatorSendNewUserAllData(ref){
			//Send new user current active grid
			def msg2 := <-getNewGenGrid(mainGrid);
			ref <+ msg2;
			
			//send new user that I am the cordinator
			def msg1 := <-setTheCoordinator(myUserId);
			ref <+ msg1;
			
			//Send grid's height and width
			def msg3 := <-getGridSize(gridH, gridW);
			ref <+ msg3;
			
			//send to all users new user Information arrray
			//def msg := <-getUsersColors(allUserInfoArray, acceptPlayer);
			//ref <+ msg;
			
			local.sendUserInfo(allUserInfoArray);
		};

		
		def searchForCoordinator(ref){
			//Get discovered users coordinator id
		    when: ref<-getCoordinator()@FutureMessage becomes: { |coordinator|
		    	def cooId := coordinator;
		    	
		    	//If it is not 0 then set local coordinator as his
		    	if: (cooId != 0) then: {
		    		// get ref for coordinator
		    		def othRef := getUserReference(cooId);

		    		setCoordinatorLocal(cooId, othRef);
		    		
		    		system.println("Coordinator set to: " + self.coordinatorRef);
		    	}
		    	//If it is 0 then iniciate coordinator fight
				else: {				    		
					coordinatorFight(); //Start Fight for coordinator roles			    		
			    };  	
		    }; //ref<-getCoordinator()@FutureMessage
		};
		
		//Set coordinator
		def setCoordinatorLocal(id, ref){
			system.println("Coordinator Set");
			self.coordinatorId := id;
			self.coordinatorRef := ref;
			
			//Send Coordinator Id to JAVA // and ask JAVA to return new coordinator Grid
			//If I become as coordinator after selection I send to everybody my grid
			JweLive.setCoordinatorId(id);
		};
		
		//Get user reference
		def getUserReference(id){
			users.get(id);
		};
		
		//Store user in AT
		def storeUserLocal(id, ref){
			//Store ref into ref array
			 userReferences := userReferences + [ref];
			 //Store id and ref into hashmap (oneline users)
			 userIDsOnlineMap.put(id, ref);
			 //Store id in usrIds list
			 userIds := userIds + [id];
			 //store ref and id in users hash map
			 users.put(id, ref);
			 
			 //Send users Id to JAVA to combine with color
			 JweLive.storeUser(id);
		}; 
	
	
		//Function finds all users, that has higher Id int then me
		def findUsersWithHigherId(){
			def bigUserRefList := [];
			
			userIds.each: { |bigUserID|
				if: (bigUserID > self.myUserId) then: {
					
					//get reference
					def othRef := getUserReference(bigUserID);
					
					if: (isOnline(othRef)) then:{
						//put references into list
						bigUserRefList := bigUserRefList + [othRef];
					};
				};
			}; 
			//return	
			bigUserRefList;
		};
	
		//Check if user is in online users list
		def isOnline(othRef){
			userIDsOnlineMap.containsValue(othRef);
		};
		
		//Coordinator Fight function
		def coordinatorFight() {		
			
			system.println("Coordinator Fight");
			//Find all users with higher userId then myUserid
			def bigUserRefList := findUsersWithHigherId();
	
			//if list is empty set myself as coordinator
			if: (bigUserRefList == []) then: {
				system.println("Noone Is biger than me. coordinator ME");
				//Set Coordinator Me
				setCoordinatorMe();
			}
			else: { 
				peerAnswer := false;
				//ask members if they are live
				bigUserRefList.each: { |othRef|
					when: othRef<-areYouLive()@FutureMessage becomes: { |answId|
						//Do nothing becouse, someone bigger than me is alive
						peerAnswer := true;
					};
				};
				system.println("wait for answer 15 sec");
				// wait 15 sec while other users with biger ID will answer
				// if noone answers I set myself as coordinator
				// If someone answers I ask him to send other users messages (bigger users)
				when: seconds(15) elapsed: {
				
			  		if: (!peerAnswer) then: {
			  			system.println("Noone answered, coordinator ME");
						//Set Coordinator Me
						setCoordinatorMe();
			  		};		  	
				};
			};//End of if
		 };//ends coordinator fight
	 

		 def setCoordinatorMe(){
		 	//Set coordinator
			setCoordinatorLocal(myUserId, myUserRef);
			
			//Send Coordinator Id to JAVA, + notify others that I am coordinator
			// + send to others new grid (my grid)
			notifyUsersNewCoordinator(myUserId);
		 };
	 
		 //Function that send to other peers new coordinator (ME)
		 def notifyUsersNewCoordinator(id){
		 	//Send msg to other peers that are online now
		 	def msg := <-setTheCoordinator(id);
			userIDsOnlineMap.each: { |p| p <+ msg};
		 };
		 
	 
	JweLive := Android.parent.registerATApp(local);
	}; //ends object
}; //ends of weLive

system.println("weLive started 5");
network.online();
self;